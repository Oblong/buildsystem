# -*- Makefile -*-

ifeq ($(dir),)
#{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ directory-local build

_make_will_recurse := 1

include $(ROOT)/buildsystem/Makefile.defs

# We're going to re-do the make in the $(ROOT) directory. Any variables
# that are external to the Makefiles themselves (i.e. the environment
# customized variables) need to be re-pathed. I do that here.
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CCXXFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CXXFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_ASFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_LDFLAGS,-L))


# we're building NOT from the root. poison the $(dir) (to declaw the user's makefile), and isssue a
# new make from the right directory
dir                := /DIR_poison

$(eval $(_define_recursive_make))


#}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} directory-local build
else # ifeq ($(dir),)
#{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ top-level build

# QT stuff uses immediate variables for efficiency, so I must include
# these in the header, not the footer
include buildsystem/Makefile.qt

# some variables (CFLAGS, etc), may have been customized by the user on the
# commandline or with the system-specific (from Makefile.sys) variables. I apply
# those here. I want these variables to be available to the user Makefile for
# modification, if desired; thus I do this in the header instead of the footer
$(eval $(apply-var-customizations))

# used to make gcc output header dependency information. All source
# files generated .d dependency definitions that are included at the
# bottom of this file
CCXXFLAGS += -MMD -MP

# always building with debug information. This is stripped into the -dbg
# packages by debhelper later
CCXXFLAGS += -g


#}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} top-level build
endif # ifeq ($(dir),)
