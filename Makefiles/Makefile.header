# -*- Makefile -*-

ifeq ($(dir),)
#{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ directory-local build

_make_will_recurse := 1

include $(ROOT)/buildsystem/Makefile.defs

# We're going to re-do the make in the $(ROOT) directory. Any variables
# that are external to the Makefiles themselves (i.e. the environment
# customized variables) need to be re-pathed. I do that here.
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CCXXFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CXXFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_CFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_ASFLAGS,-I))
$(eval $(call _chdir_customized_vars,_CUSTOMIZED_LDFLAGS,-L))


# we're building NOT from the root. poison the $(dir) (to declaw the user's makefile), and isssue a
# new make from the right directory
dir                := /DIR_poison

$(eval $(_define_recursive_make))


#}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} directory-local build
else # ifeq ($(dir),)
#{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ top-level build

# QT stuff uses immediate variables for efficiency, so I must include
# these in the header, not the footer
include buildsystem/Makefile.qt

# some variables (CFLAGS, etc), may have been customized by the user on the
# commandline or with the system-specific (from Makefile.sys) variables. I apply
# those here. I want these variables to be available to the user Makefile for
# modification, if desired; thus I do this in the header instead of the footer
$(eval $(apply-var-customizations))

# used to make gcc output header dependency information. All source
# files generated .d dependency definitions that are included at the
# bottom of this file
CCXXFLAGS += -MMD -MP

# always building with debug information. This is stripped into the -dbg
# packages by debhelper later
CCXXFLAGS += -g

# make SO_VERSION, ABI_VERSION, REPO_NAME, REPO_NAME_ABI_VERSIONED
ifeq ($(SO_VERSION),)
  $(eval $(_read_repo_version))
endif

# make available the version of this source tree to the source itself
_GIT_VERSION := $(or $(_GIT_VERSION),$(strip $(or     \
   $(shell test -d .git && git describe 2>/dev/null), \
   Non-git build for $(REPO_NAME_ABI_VERSIONED))))
CCXXFLAGS += -D_GIT_VERSION="\"$(_GIT_VERSION)\""


# I want to copy the DT_NEEDED tags. Older ld implementations do this by
# default. Newer ones (such as that in Debian/unstable 2012/2) need to
# be explicitly turned on. I check to see if the option exists, and turn
# it on if it does. I would also like to add --as-needed, but we don't
# specify our libraries carefully enough, so stuff breaks with that
# turned on
ifeq ($(LDFLAGS_COPY_DTNEEDED_CHECKED),)
LDFLAGS_COPY_DTNEEDED_CHECKED := 1
LDFLAGS_COPY_DTNEEDED := $(if $(shell ld --copy-dt-needed-entries 2>&1 | egrep 'unrecognized|unknown'),,-Wl,--copy-dt-needed-entries)
endif
LDFLAGS += $(LDFLAGS_COPY_DTNEEDED)

# About to include the project Makefile. I save all the active variables so that
# I can detect unwanted modifications. Unless ALLOW_OVERRIDE is set, project
# Makefiles are ONLY allowed to append to the active variables
ALLOW_OVERRIDE :=
$(foreach v,$(ACTIVE_VARS),$(eval _ORIG_$v := $($v)))



#}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} top-level build
endif # ifeq ($(dir),)
