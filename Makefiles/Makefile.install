# -*- Makefile -*-

# DIST_ALL is the CONTENTS of all the DIST_... variables
DIST_ALL = $(foreach t,$(DIST_TYPES),$($t))

# I want to allow wildcards in my DIST_... lists. Since some of the
# files in those lists are built, they may not exist at the time the
# Makefiles are read. I thus apply the wildcard to every element, but
# don't remove non-existing elements
$(foreach t,$(DIST_TYPES),$(eval $t := $(call soft-wildcard, $($t))))


# 'make install' installs files for packaging, while 'make localinstall' dumps
# them all together into a single directory. The only difference is the
# DESTDIR_DEV and DESTDIR_MAIN directories.

ifneq ($(filter $(MAKECMDGOALS),install),)
#{{{{{{{{{{{{{{ 'make install'

  # If the TARGET_NAME starts with 'lib', it's a library. Otherwise it's
  # binaries. Libraries have -dev versions of their packages, have ABI_VERSIONs,
  # and are allowed to have headers, .so, .a, etc. For each library I have 3
  # packages:
  #
  # liboblong-blahN    : main library, N is a number that gets bumped up with each API chage
  # liboblong-blah-dev : devel files (.a, .h, .pc)
  # liboblong-blahN-dbg: just the debug symbols

  ifeq ($(TARGET_NAME:lib%=lib),lib)
  #{{{{{{{{{{{{{{ library
    PACKAGENAME      := $(PACKAGENAME_BASE_LIB)$(ABI_VERSION)
    $(dir)/install: DESTDIR_DEV := debian/$(PACKAGENAME)-dev
  #}}}}}}}}}}}}}}
  else
  #{{{{{{{{{{{{{{ binary package
    PACKAGENAME      := $(PACKAGENAME_BASE_BIN)
  #}}}}}}}}}}}}}}
  endif

  $(dir)/install: DESTDIR_MAIN := debian/$(PACKAGENAME)
  install: $(dir)/install
  .PHONY: install
#}}}}}}}}}}}}}} 'make install'
else
#{{{{{{{{{{{{{{ 'make localinstall'
  localinstall: DESTDIR_DEV  := localinstall
  localinstall: DESTDIR_MAIN := localinstall

  localinstall: $(dir)/install
  .PHONY: localinstall
#}}}}}}}}}}}}}} 'make localinstall'
endif

.PHONY: $(dir)/install




# make sure the package names defined in debian/control have the necessary
# embedded version numbers. I only do this during 'make install' for efficiency
ifneq ($(filter $(MAKECMDGOALS),install),)
ifeq ($(_CHECKED_DEBIAN_CONTROL_VERSIONS),)
  _CHECKED_DEBIAN_CONTROL_VERSIONS := 1

  _DEBIAN_CONTROL_CHECK_RESULT := $(shell perl buildsystem/debianizationValidate.pl $(REPO_NAME_ABI_VERSIONED) 2>&1)
  $(if $(_DEBIAN_CONTROL_CHECK_RESULT),			\
       $(error debian/control failed checks:		\
               $(_DEBIAN_CONTROL_CHECK_RESULT)))
endif
endif



# If I have a DAEMON_COMMAND, I define an upstart configuration
ifneq ($(strip $(DAEMON_COMMAND)),)

# the upstart stanzas can be multiline, so I export them to the
# environment and have perl pick them up from there
export UPSTART_STANZAS

#{{{{{{{{{{{{{{ making upstart conf
define _install_upstart_daemon
@perl -pe 's{^###.*}{}g; \
           s{\@NAME\@}{$(TARGET_NAME)}g; \
           s{\@UPSTART_STANZAS\@}{$$ENV{UPSTART_STANZAS}}g; \
           s{\@COMMAND\@}{$(DAEMON_COMMAND)}g;' \
	buildsystem/templates/template.upstart.conf > \
  $(DESTDIR_MAIN)/etc/init/oblong/$(TARGET_NAME).conf

test -e $(DESTDIR_MAIN).prerm    || cp buildsystem/templates/template.maintainerscript.header $(DESTDIR_MAIN).prerm
test -e $(DESTDIR_MAIN).postinst || cp buildsystem/templates/template.maintainerscript.header $(DESTDIR_MAIN).postinst
@perl -pe 's{\#JOB\#}{oblong/$(TARGET_NAME)}g;' /usr/share/debhelper/autoscripts/prerm-upstart    >> $(DESTDIR_MAIN).prerm
@perl -pe 's{\#JOB\#}{oblong/$(TARGET_NAME)}g;' /usr/share/debhelper/autoscripts/postinst-upstart >> $(DESTDIR_MAIN).postinst

endef
#}}}}}}}}}}}}}}
endif



#{{{{{{{{{{{{{{ header path stuff

# the headers are installed into
#   /usr/include/$(REPO_NAME_ABI_VERSIONED)/$(HEADER_PATH)/$(HEADER_SUBPATH)

# Here the HEADER_PATH holds all of this project's headers, and if the
# project has sub-path headers, they go into subdirectories. The
# HEADER_PATH defaults to the location of the project in the source
# tree, unless explicitly overridden in the project Makefile. Example:
# project lives in $(ROOT)/libXXX. It's trying to install a.h, d/b.h.
# These will be installed to
#   /usr/include/repo3.2/libXXX/a.h
#   /usr/include/repo3.2/libXXX/d/b.h
INCLUDE_DIR = $(DESTDIR_DEV)/usr/include/$(REPO_NAME_ABI_VERSIONED)
ifneq ($(strip $(DIST_HEADERS)),)

_dir_rel          = $(patsubst %/,%,$(dir $@))
_DIST_HEADER_DIRS = $(sort $(dir $(DIST_HEADERS)))

define _install_header
cp -P $h $(INCLUDE_DIR)/$(or $(HEADER_PATH),$(_dir_rel))/$(patsubst $(_dir_rel)/%,%,$h)

endef

endif
#}}}}}}}}}}}}}} header path stuff






# using 'cp -P' instead of 'install' because the latter follows links unconditionally
# BIN_TARGET is incorporated in DIST_BINS
$(dir)/install: $(LIB_TARGET_A) $(LIB_TARGET_SO) $(LIB_TARGET_SO_BARE) $(LIB_TARGET_SO_BARE).$(ABI_VERSION) $(DIST_ALL)

# must have DESTDIR if we're doing an "install"
ifneq ($(filter $(MAKECMDGOALS),install),)
ifeq  ($(strip $(DESTDIR)),)
	@echo Tried to make install without having DESTDIR defined
	@echo "make install" is ONLY for the debian package.
	@echo What are you trying to do?
	@false
endif
endif
ifeq ($(TARGET_NAME:lib%=lib),lib)
	mkdir -p $(DESTDIR_MAIN)/usr/lib
	mkdir -p $(DESTDIR_DEV)/usr/lib/$(REPO_NAME_ABI_VERSIONED)

	cp -P $(LIB_TARGET_SO)  $(DESTDIR_MAIN)/usr/lib
	cp -P $(LIB_TARGET_A)   $(DESTDIR_DEV)/usr/lib/$(REPO_NAME_ABI_VERSIONED)
	ln -fs $(notdir $(LIB_TARGET_SO)) $(DESTDIR_MAIN)/usr/lib/$(notdir $(LIB_TARGET_SO_BARE)).$(ABI_VERSION)
	ln -fs ../$(notdir $(LIB_TARGET_SO)) $(DESTDIR_DEV)/usr/lib/$(REPO_NAME_ABI_VERSIONED)/$(notdir $(LIB_TARGET_SO_BARE))
endif
ifneq ($(strip $(DIST_BINS)),)
	mkdir -p $(DESTDIR_MAIN)/usr/bin
	install -m 0755 $(DIST_BINS) $(DESTDIR_MAIN)/usr/bin/
endif
ifneq ($(strip $(DIST_HEADERS)),)
  # headers are installed into a directory based on the path of the
  # header in the tree, OR based on the HEADER_PATH variable. See
  # comments above
  ifneq ($(strip $(HEADER_PATH)),)
	mkdir -p $(addprefix $(INCLUDE_DIR)/,$(patsubst $(_dir_rel)%,$(HEADER_PATH)%,$(_DIST_HEADER_DIRS)))
  else
	mkdir -p $(addprefix $(INCLUDE_DIR)/,$(_DIST_HEADER_DIRS))
  endif
	$(foreach h,$(DIST_HEADERS),$(_install_header))
endif
ifneq ($(strip $(DIST_ETC_OBLONG)),)
	mkdir -p $(DESTDIR_MAIN)/etc/oblong/$(TARGET_NAME)
	cp -Pr $(DIST_ETC_OBLONG) $(DESTDIR_MAIN)/etc/oblong/$(TARGET_NAME)
endif
ifneq ($(strip $(DIST_SHARE_OBLONG)),)
	mkdir -p $(DESTDIR_MAIN)/usr/share/oblong/$(TARGET_NAME)
	cp -Pr $(DIST_SHARE_OBLONG) $(DESTDIR_MAIN)/usr/share/oblong/$(TARGET_NAME)
endif
ifneq ($(strip $(DIST_UPSTART)),)
# This should use dh_installinit, but I think that only works with a single upstart file...
	mkdir -p $(DESTDIR_MAIN)/etc/init/oblong
	cp -Pr $(DIST_UPSTART) $(DESTDIR_MAIN)/etc/init/oblong
endif
ifneq ($(strip $(DIST_DOCS)),)
	echo $(DIST_DOCS) | xargs -n1 > debian/$(PACKAGENAME).docs
endif
ifneq ($(strip $(DIST_MANS)),)
	echo $(DIST_MANS) | xargs -n1 > debian/$(PACKAGENAME).manpages
endif
ifneq ($(strip $(DAEMON_COMMAND)),)
	mkdir -p $(DESTDIR_MAIN)/etc/init/oblong
	$(_install_upstart_daemon)
endif
