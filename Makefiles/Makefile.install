# -*- Makefile -*-

# DIST_ALL is the CONTENTS of all the DIST_... variables
DIST_ALL = $(foreach t,$(DIST_TYPES),$($t))

# I want to allow wildcards in my DIST_... lists. Since some of the
# files in those lists are built, they may not exist at the time the
# Makefiles are read. I thus apply the wildcard to every element, but
# don't remove non-existing elements
$(foreach t,$(DIST_TYPES),$(eval $t := $(call soft-wildcard, $($t))))

# If I have a DAEMON_COMMAND, I define an upstart configuration
ifneq ($(DAEMON_COMMAND),)

# the upstart stanzas can be multiline, so I export them to the
# environment and have perl pick them up from there
export UPSTART_STANZAS

#{{{{{{{{{{{{{{ making upstart conf
define _install_upstart_daemon
@perl -pe 's{^###.*}{}g; \
           s{\@NAME\@}{$(TARGET_NAME)}g; \
           s{\@UPSTART_STANZAS\@}{$$ENV{UPSTART_STANZAS}}g; \
           s{\@COMMAND\@}{$(DAEMON_COMMAND)}g;' \
	appliance/template.upstart.conf > \
  $(DESTDIR_MAIN)/etc/init/oblong/$(TARGET_NAME).conf

test -e $(DESTDIR_MAIN).prerm    || cp appliance/template.maintainerscript.header $(DESTDIR_MAIN).prerm
test -e $(DESTDIR_MAIN).postinst || cp appliance/template.maintainerscript.header $(DESTDIR_MAIN).postinst
@perl -pe 's{\#JOB\#}{oblong/$(TARGET_NAME)}g;' /usr/share/debhelper/autoscripts/prerm-upstart    >> $(DESTDIR_MAIN).prerm
@perl -pe 's{\#JOB\#}{oblong/$(TARGET_NAME)}g;' /usr/share/debhelper/autoscripts/postinst-upstart >> $(DESTDIR_MAIN).postinst

endef
#}}}}}}}}}}}}}}
endif



#{{{{{{{{{{{{{{ header path stuff

# the headers are installed into
#   /usr/include/$(HEADER_PATH)/$(HEADER_SUBPATH)

# Here the HEADER_PATH holds all of this project's headers, and if the
# project has sub-path headers, they go into subdirectories. The
# HEADER_PATH defaults to the location of the project in the source
# tree, unless explicitly overwridden in the project Makefile. Example:
# project lives in $(ROOT)/libXXX. It's trying to install a.h, d/b.h.
# These will be installed to
#   /usr/include/libXXX/a.h
#   /usr/include/libXXX/d/b.h
ifneq ($(DIST_HEADERS),)

_dir_rel          = $(patsubst %/,%,$(dir $@))
_DIST_HEADER_DIRS = $(sort $(dir $(DIST_HEADERS)))

define _install_header
cp -P $h $(DESTDIR_DEV)/usr/include/$(or $(HEADER_PATH),$(_dir_rel))/$(patsubst $(_dir_rel)/%,%,$h)

endef

endif
#}}}}}}}}}}}}}} header path stuff




# now the install rules. If the TARGET_NAME starts with 'lib', it's a
# library. Otherwise it's binaries. Libraries have -dev versions of
# their packages, have API_VERSIONs, and are allowed to have headers,
# .so, .a, etc. For each library I have 3 packages:
#
# liboblong-blahN    : main library, N is a number that gets bumped up with each API chage
# liboblong-blah-dev : devel files (.a, .h, .pc)
# liboblong-blahN-dbg: just the debug symbols



ifeq ($(TARGET_NAME:lib%=lib),lib)
#{{{{{{{{{{{{{{ library

PACKAGENAME_BASE := $(PACKAGENAME_BASE_LIB)
PACKAGENAME      := $(PACKAGENAME_BASE)$(API_VERSION)
DESTDIR_DEV      := debian/$(PACKAGENAME_BASE)-dev

#}}}}}}}}}}}}}}
else
#{{{{{{{{{{{{{{ binary package

PACKAGENAME_BASE := $(PACKAGENAME_BASE_BIN)
PACKAGENAME      := $(PACKAGENAME_BASE)
#}}}}}}}}}}}}}}
endif

DESTDIR_MAIN     := debian/$(PACKAGENAME)


# using 'cp -P' instead of 'install' because the latter follows links unconditionally
# BIN_TARGET is incorporated in DIST_BINS
$(dir)/install: $(LIB_TARGET_A) $(LIB_TARGET_SO) $(DIST_ALL)
ifeq ($(DESTDIR),)
	@echo Tried to make install without having DESTDIR defined
	@echo "make install" is ONLY for the debian package.
	@echo What are you trying to do?
	@false
endif
ifeq ($(TARGET_NAME:lib%=lib),lib)
	mkdir -p $(DESTDIR_MAIN)/usr/lib
	mkdir -p $(DESTDIR_DEV)/usr/lib

	cp -P $(LIB_TARGET_SO)  $(DESTDIR_MAIN)/usr/lib
	cp -P $(LIB_TARGET_A)   $(DESTDIR_DEV)/usr/lib
	ln -fs $(notdir $(LIB_TARGET_SO)) $(DESTDIR_MAIN)/usr/lib/$(notdir $(LIB_TARGET_SO_BARE)).$(API_VERSION)
	ln -fs $(notdir $(LIB_TARGET_SO)) $(DESTDIR_DEV)/usr/lib/$(notdir $(LIB_TARGET_SO_BARE))
endif
ifneq ($(DIST_BINS),)
	mkdir -p $(DESTDIR_MAIN)/usr/bin
	install -m 0755 $(DIST_BINS) $(DESTDIR_MAIN)/usr/bin/
endif
ifneq ($(DIST_HEADERS),)
  # headers are installed into a directory based on the path of the
  # header in the tree, OR based on the HEADER_PATH variable. See
  # comments above
  ifneq ($(HEADER_PATH),)
	mkdir -p $(addprefix $(DESTDIR_DEV)/usr/include/,$(patsubst $(_dir_rel)%,$(HEADER_PATH)%,$(_DIST_HEADER_DIRS)))
  else
	mkdir -p $(addprefix $(DESTDIR_DEV)/usr/include/,$(_DIST_HEADER_DIRS))
  endif
	$(foreach h,$(DIST_HEADERS),$(_install_header))
endif
ifneq ($(DIST_ETC_OBLONG),)
	mkdir -p $(DESTDIR_MAIN)/etc/oblong/$(TARGET_NAME)
	cp -Pr $(DIST_ETC_OBLONG) $(DESTDIR_MAIN)/etc/oblong/$(TARGET_NAME)
endif
ifneq ($(DIST_SHARE_OBLONG),)
	mkdir -p $(DESTDIR_MAIN)/usr/share/oblong/$(TARGET_NAME)
	cp -Pr $(DIST_SHARE_OBLONG) $(DESTDIR_MAIN)/usr/share/oblong/$(TARGET_NAME)
endif
ifneq ($(DIST_UPSTART),)
# This should use dh_installinit, but I think that only works with a single upstart file...
	mkdir -p $(DESTDIR_MAIN)/etc/init/oblong
	cp -Pr $(DIST_UPSTART) $(DESTDIR_MAIN)/etc/init/oblong
endif
ifneq ($(DIST_DOCS),)
	echo $(DIST_DOCS) | xargs -n1 > debian/$(PACKAGENAME).docs
endif
ifneq ($(DIST_MANS),)
	echo $(DIST_MANS) | xargs -n1 > debian/$(PACKAGENAME).manpages
endif
ifneq ($(DAEMON_COMMAND),)
	mkdir -p $(DESTDIR_MAIN)/etc/init/oblong
	$(_install_upstart_daemon)
endif


install: $(dir)/install
.PHONY: $(dir)/install

