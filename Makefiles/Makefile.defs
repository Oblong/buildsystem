# -*- Makefile -*-

# various useful definitions for the build system. This file contains
# the definitions, but has NO rules itself.
# THIS FILE IS INCLUDED ONCE, BY THE TOP-LEVEL.
#
# THIS FILE MUST BE INCLUDED BEFORE ANY OTHERS. This happens in the top-level
# Makefile and in Makefile.header when building from a subdir

# ROOT is assumed to be relative; I make an absolute version for later use
ROOT_ABS := $(abspath $(ROOT))

# all the various types of distribution I can define
DIST_TYPES := DIST_BINS DIST_HEADERS DIST_MANS DIST_DOCS DIST_ETC_OBLONG DIST_SHARE_OBLONG DIST_UPSTART

# variables I use in my recipes and rules. These are reset between includes, and are
# stored to be accessible to my recipes on a per-target basis. This is needed since
# recipes evaluate their variables deferred
ACTIVE_VARS := CCXXFLAGS CFLAGS CXXFLAGS LDFLAGS LDLIBS ASFLAGS CPPFLAGS	\
$(DIST_TYPES) HEADER_PATH							\
LIB_OBJECTS BIN_TARGET BIN_TARGET_NOINST EXTRACLEAN TARGET_NAME			\
LIB_TARGET_SO_BARE LIB_TARGET_SO LIB_TARGET_A IS_UNIT_TEST dir			\
DIST_ALL PACKAGENAME 								\
DAEMON_COMMAND UPSTART_STANZAS

# These are a subset of ACTIVE_VARS. These variables are allowed to be
# customized by the user on the cmdline. So the user can say
# CFLAGS=-foo make
ACTIVE_VARS_CUSTOMIZABLE := CCXXFLAGS CFLAGS CXXFLAGS LDFLAGS ASFLAGS CPPFLAGS

# function to apply the customizations. Note that the customizations are
# prepended, NOT appended. This is because gcc searches directories in
# the order given, and I want the user-given overrides to have priority
apply-var-customizations = $(foreach v,$(ACTIVE_VARS_CUSTOMIZABLE),$(eval $v:=$(_CUSTOMIZED_$v) $($v)))


# given a string and an option, strips spaces after the option. For instance
# $(call _strip_spaces_after_option,-L  /tmp/abc -L    /tmp/123,-L)
# becomes '-L/tmp/abc -L/tmp/123'
# A side effect is that ALL consecutive spaces are collapsed to one
_strip_spaces_after_option = $(subst $(2) ,$(2),$(1:%=%))

# given a string, retrieves all arguments to a given option. So
# $(call _get_option_args,-foo -L  /tmp/abc -bar -L    /tmp/123,-L)
# gives '/tmp/abc /tmp/123'
_get_option_args = $(patsubst $(2)%,%,$(filter $(2)%,$(call _strip_spaces_after_option,$(1),$(2))))

# used in reporting to let the user know what'd being done when an error/message happened
_when = when $(strip			\
  $(if $@,				\
    building $@,			\
    $(if $(filter /DIR_poison,$(dir)),	\
      between Makefiles,		\
      $(if $(dir),			\
        reading $(dir)/Makefile,        \
        reading toplevel or header Makefile))))

# makes sure every directory in the passed-in list exists. Error if not,
# no output if yes. Second arg used in the error message
_assert_alldirs_exist = $(foreach d,$(1),$(if $(wildcard $d),,$(error $(2) given a nonexisting directory ($d) $(_when)))) \


# These check our custom directories for existence. Note that the
# compile version must be called with $(call) because only the caller
# knows if we're looking at CFLAGS or CXXFLAGS
_ensure_custom_dirs_exist_compile =				\
  $(call _assert_alldirs_exist,$(_CCXXFLAGS_SEARCH_DIRS),-I)

_ensure_custom_dirs_exist_link =										\
  $(if $(filter -L%,$(LDLIBS)), $(error LDLIBS '$(LDLIBS)' has -L $(_when). This must be in LDFLAGS instead))	\
  $(call _assert_alldirs_exist,$(_LDFLAGS_SEARCH_DIRS),-L)


# linker search paths given with -L require special attention. If a linker path
# is given that is not in the standard system library paths, I add an RPATH. If
# we do this while building packages, I throw an error: don't want packages to
# refer to external, RPATHed libraries.
#
# a -L library in the standard hierarchy is assumed to 'just work'. The normal
# case here is that I have a library such as /usr/lib/libLoam.so.3.2.0 with
# symlinks at /usr/lib/g-speak3.2/libLoam.so and /usr/lib/libLoam.so.3.2, and an
# SONAME of libLoam.so.3.2. The "normal" way to link with this is
# '-L/usr/lib/g-speak3.2 -lLoam'. At link-time, the libLoam.so symlink is used;
# at run-time the libLoam.so.3.2 symlink is used. Note that not only is an
# RPATH=/usr/lib/g-speak3.2 unnecessary, it also wouldn't do any good, since the
# SONAME-named library is in /usr/lib. I thus simply assume that if we're asked
# to look for libraries somewhere in the standard hierarchy, then all the
# symlinks and such are set up correctly. With correctly-packaged depencies,
# this should be a good assumption.
#
# Non-standard paths such as /opt/..... will generate an RPATH if we're
# building, and an error if we're packaging.
#
# Some more things to worry about: -L logically must reside in LDFLAGS. If
# somebody puts it in LDLIBS, I'll complain about it. Also, gcc accepts both '-L
# dir' and '-Ldir'. I like the no-spaces version so I need to detect and convert
# the with-spaces version.
#
# This function must be deferred so that it can see the per-target
# LDFLAGS and LDLIBS variables
_LDFLAGS_SEARCH_DIRS = $(call _get_option_args,$1,-L)

SYSTEM_LINKER_PATHS := /usr/lib /lib
SYSTEM_LINKER_PATHS += $(addsuffix /%,$(SYSTEM_LINKER_PATHS))

_LDFLAGS_POSTPROCESS = $(_ensure_custom_dirs_exist_link)								\
  $(foreach d,														\
    $(filter-out $(SYSTEM_LINKER_PATHS), $(_LDFLAGS_SEARCH_DIRS)),							\
    $(if $(filter $(MAKECMDGOALS),install),										\
      $(warning When building packages, system libraries should be in a standard location (presumably from a package);	\
              -L strongly discouraged; a package with an RPATH will result for $d. Warning $(_when)))			\
    -Wl$(comma)-rpath$(comma)$(abspath $d))										\
  $1



# make sure any -I directories exist
# build with -O2 if we don't already have a -Ox
#
# Note that unlike _LDFLAGS_POSTPROCESS, this is a function to be called
# with $(call). This is because when linking we KNOW to look at LDFLAGS,
# but when compiling we look at a different flag depending on whether
# we're doing C or C++
_CCXXFLAGS_SEARCH_DIRS = $(call _get_option_args,$1,-I)
_CCXXFLAGS_POSTPROCESS = $(_ensure_custom_dirs_exist_compile)	\
  $1								\
  $(if $(filter -O%,$1),,-O2)


# takes a list of project library files, extracts all their directories
# and returns an rpath-link option for each
comma :=,
_rpath-link_dirs_from_libs = $(sort $(foreach l,$1,-Wl$(comma)-rpath-link$(comma)$(abspath $(dir $l))))


# a function to reset the active variables (before a new include) and to poison the
# global active variables. No global variables should be used, and poisoning makes it
# obvious that something wrong is happening
reset-active-vars  = $(foreach v,$(ACTIVE_VARS),$(eval $v := ))
poison-active-vars = $(foreach v,$(ACTIVE_VARS),$(eval $v := $(v)_poison))

# all targets that have recipes defined, which thus need variables accessible to them
# through deferred evaluation. This double-loop generates a function that can be
# evaluated to generate lines such as
# $(LIB_TARGET_SO):  LDFLAGS     := $(LDFLAGS)
#
# This is done for all var/target combinations. This is a bit overkill, since all
# recipes don't need all the variables, but it doesn't hurt
TARGETS_NEED_PERSISTENT_ACTIVE_VARS := $$(dir)/%.o $$(dir)/%.1	\
  $$(LIB_TARGET_SO) $$(LIB_TARGET_SO_BARE) $$(LIB_TARGET_A)	\
  $$(BIN_TARGET_ALL) $$(dir)/check $$(dir)/install


persist-active-vars = $(foreach v,$(ACTIVE_VARS),\
  $(eval $(TARGETS_NEED_PERSISTENT_ACTIVE_VARS): $v := $$($v)))


# variables that may be specified in the user Makefile that use relative paths.
# Makefile repaths them to $(dir) using the following function
USER_RELATIVE_VARS = $(DIST_TYPES) LIB_OBJECTS BIN_TARGET BIN_TARGET_NOINST EXTRACLEAN
relocate-vars = $(foreach v,$(USER_RELATIVE_VARS),$(eval $v := $(addprefix $(dir)/,$($(v)))))



#
# basic functional stuff. These are a perl-style grep and map. You call these like
#
# $(call grep,cond,list)
# where cond is another function
grep = $(foreach x,$(2),$(if $(call $(1),$(x)),$(x)))
map  = $(foreach x,$(2),$(call $(1),$(x)))


# a non-destructive wildcard function. Takes a list; any element that matches
# nothing is left alone as is. This also removes duplicates through the $(sort)
# function. Thus it also sorts the list.
soft-wildcard = $(sort $(foreach d,$(1),$(or $(wildcard $(d)),$(d))))

# A wildcard function that reports an error if it encounters any term
# that expands to nothing (everything MUST exist). Similarly, it removes
# duplicates and sorts
hard-wildcard = $(sort $(foreach d,$(1),$(or $(wildcard $(d)),$(error Wildcard matched nothing: '$(1)' $(_when)))))



# _prepend_dir_selectively takes a list of paths, classifies it, and
# prepends a $(dir) if necessary. The paths this function outputs can be
# used with functions such as $(abspath). If $(dir) is '', simply
# returns the input list. Logic:
#
# | path type              | identified by   | output   |
# |------------------------+-----------------+----------|
# | Absolute paths         | /%              | %        |
# | $(ROOT)-relative paths | ./%             | %        |
# | $(dir)-relative paths  | everything else | $(dir)/% |
_prepend_dir_selectively_one = $(if $(filter ./%,$(1))$(filter /%,$(1)),$(1),$(dir)/$(1))
_prepend_dir_selectively     = $(if $(dir),$(call map,_prepend_dir_selectively_one,$(1)),$(1))

# The 'relpath' function takes a list of paths (absolute or relative to
# ROOT) and returns a cleaned-up path relative to ROOT. For instance,
# something like libRetro/../libAttic gets converted to libAttic. The
# root gets converted to '.'. The empty string is returned unchanged. If
# an out-of-tree absolute path is given, an error is generated
#
# These helpers take a list of paths (relative or absolute) and return
# only those that are (or not) that are in our repo
_filter-intree-predicate     = $(filter     $(ROOT_ABS)%,$(abspath $(1)))
_filter-out-intree-predicate = $(filter-out $(ROOT_ABS)%,$(abspath $(1)))
_filter-intree     = $(call grep,_filter-intree-predicate,$(1))
_filter-out-intree = $(call grep,_filter-out-intree-predicate,$(1))
#
# this makes paths such as '/libRetro' or ''.
relpath-withinitial-slash = $(if $(call _filter-intree,$(1)),$(patsubst $(ROOT_ABS)%,%,$(abspath $(1))), \
	$(error out-of-tree path given: '$(1)' $(_when)))
# this converts it to 'libRetro' or '.'
relpath-single = $(if $(relpath-withinitial-slash),$(relpath-withinitial-slash:/%=%),.)
#
# find the relpath of each element
relpath = $(and $(1),$(call map,relpath-single,$(1)))




# I separate LDLIBS into those that are a part of this repo and those
# that aren't. All %.so LDLIBS are examined. If their path is in this
# repo, they go into LDLIBS_PROJECT; otherwise, LDLIBS_SYSTEM. I keep
# these as deferred references to try to capture the per-target LDLIBS
# settings
#
# General logic:
# ../
# if( /%.so or ./%.so ) # this is handled by _prepend_dir_selectively
# {
#   if(in tree)
#     LDLIBS_PROJECT
#   else
#     LDLIBS_SYSTEM
# }
# else if( %.so )
# {
#   if( $(dir)/% in tree)
#     LDLIBS_PROJECT = $(dir)/%
#   else
#     LDLIBS_SYSTEM  = $(dir)/%
# }
# else
# {
#   LDLIBS_SYSTEM
# }
#
_LDLIBS_onlyso          = $(filter      %.so,$(LDLIBS))
_LDLIBS_notso           = $(filter-out  %.so,$(LDLIBS))
_LDLIBS_onlyso_pathed   = $(call _prepend_dir_selectively,$(_LDLIBS_onlyso))
_create_LDLIBS_SYSTEM   = $(_LDLIBS_notso)
_create_LDLIBS_SYSTEM  += $(call                _filter-out-intree, $(_LDLIBS_onlyso_pathed))
_create_LDLIBS_PROJECT  = $(call relpath,$(call _filter-intree,     $(_LDLIBS_onlyso_pathed)))




# function to read in all xxx_SUBSET variables and use them to define
# subsets. Once a subset is defined, the corresponsing xxx_SUBSET
# variable is set to ''
define _read_subsets
$(foreach subsetvar,\
	$(filter %_SUBSET,$(.VARIABLES)),\
	$(and $($(subsetvar)),$(eval $(call _make_one_subset,$(subsetvar)))))
endef

define _make_one_subset
$(if $(MAKE_DEBUG), $(info MAKE_DEBUG $(_when): Defining subset '$1' in dir '$(dir)'. Subset is '$($1)'))

_subset_name   := $(1:%_SUBSET=%)
_subset_pathed := $(call _prepend_dir_selectively,$($1))
$(dir)/$$(_subset_name)       $$(_subset_name):       $$(_subset_pathed)
$(dir)/$$(_subset_name)/clean $$(_subset_name)/clean: $$(_subset_pathed:%=%/clean)
.PHONY: $$(_subset_name) $$(_subset_name)/clean $(dir)/$$(_subset_name) $(dir)/$$(_subset_name)/clean
$1 :=
endef


# base package names from TARGET_NAMEs
PACKAGENAME_BASE_LIB = liboblong-$(shell echo $(TARGET_NAME) | sed 's/^lib//' | tr A-Z a-z)
PACKAGENAME_BASE_BIN = oblong-$(shell echo $(TARGET_NAME) | tr A-Z a-z | tr _ -)




# I want to support custom make variables passed in on the commandline.
# Ideally I want the user to pass in a variable such as CFLAGS, then
# have those flags be used automatically, in addition to all other flags
# that are determined later. Only some of my variables are customizable.
# Any ACTIVE_VAR that isn't customizable isn't allowed to be set at this
# point. For instance the user shouldn't be trying to customize
# LIB_OBJECTS, as it's a fundamental Makefile setting. Non-active vars
# could be customized, though, and the user is responsible for making
# sure they don't clash with anything
$(foreach v,$(ACTIVE_VARS),$(if $($v),$(if $(filter-out $(ACTIVE_VARS_CUSTOMIZABLE),$v),$(error Var '$v' not customizable. Are you SURE you want to set it yourself? ($(when))))))
# There are two ways to pass variables to make:
#
# make CFLAGS=-foo
#   and
# CFLAGS=-foo make
#
# The former creates a "command line" variable and the latter an
# "environment variable". In order to be able to modify a "command line"
# variable (to add other flags, say), one MUST use 'override'. So one would have to do
#
# override CFLAGS += -bar
#
# without the "override" nothing would happen. I want to avoid this
# rabbithole entirely, so I disallow "command line" variables for things
# that I modify. Environment variables are OK, though
$(foreach v,$(ACTIVE_VARS_CUSTOMIZABLE),$(if $(filter command line,$(origin $v)), $(error Var '$v' not allowed as a make parameter. Please do "$v=xxxx make yyyy" instead)))
#
# OK. Any user-customized vars are valid. I'm going to apply these to
# all the sub-makefiles. Thus I copy the values of these variables
# (CFLAGS to _CUSTOMIZED_CFLAGS for instance), and apply them one
# at a time when I need them
$(foreach v,$(ACTIVE_VARS_CUSTOMIZABLE),$(if $($v),$(eval _CUSTOMIZED_$v := $($v))))

# when doing a submake in the $(ROOT) I need to change the relative
# paths in my user-customized variables. This function handles that
define _chdir_customized_vars
_chdir_customized_vars_single =\
   $$(if $$(filter $2%,$$1),\
     $2$$(abspath $$(patsubst $2%,%,$$1)),\
     $$1)
$1 := $$(call map,_chdir_customized_vars_single,$(call _strip_spaces_after_option,$($1),$2))
export $1
unexport $(1:_CUSTOMIZED_%=%)
endef


# function to read off repo name, version number
define _read_repo_version
  # The debian/changelog has the repository name and the full version number
  # that I use to version my .so files. So if I'm at version 3.2.5, my
  # libraries will be libA.so.3.2.5. The ABI version is the leading part of
  # this full version number. I assume that all-but-the-last digit are the ABI
  # version, so in the example above, the ABI version is "3.2". Furthermore, I
  # only look at leading digits and decimal points. So for instance, the
  # latest debian/changelog entry can be
  #
  # oblong-perception (3.11.6-dima-2) lucid; urgency=low
  #
  # This would imply
  #   SO_VERSION              = '3.11.6'
  #   ABI_VERSION             = '3.11'
  #   REPO_NAME               = 'oblong-perception'
  #   REPO_NAME_ABI_VERSIONED = 'oblong-perception3.11'
  #
  # The 'Source:' field in debian/control must match $(REPO_NAME). This is
  # enforced during the 'make install' step. Furthermore, all libxxx and
  # libxxx-dev packages MUST have the ABI_VERSION in their name, so they would
  # be called liboblong-xxx3.11 and liboblong-xxx3.11-dev. This is also
  # enforced during the 'make install'. It'd be nice to be able to report
  # failures about this earlier, but I don't want to add that extra task to
  # every single invocation of Make. Thus these checks are done later by
  # debianizationValidate.pl

  # debian has a dpkg-parsechangelog tool to parse the changelog, but it's
  # significantly slower than the gawk version below, so I don't use it
  _ALL_FIELDS :=                                                         \
    $$(or $$(strip                                                       \
      $$(shell                                                           \
        gawk '{ reponame = $$$$1;                                        \
                $$$$0 = gensub(".*\\(([0-9\\.]+).*?\\).*", "\\1", "g");  \
                fullversion = $$$$0;                                     \
                sub("\\.[0-9]+$$$$","");                                 \
                print reponame, fullversion, $$$$0;                      \
                exit}' debian/changelog)),                               \
      $$(error Could not parse versions from debian/changelog))

  REPO_NAME   := $$(word 1,$$(_ALL_FIELDS))
  SO_VERSION  := $$(word 2,$$(_ALL_FIELDS))
  ABI_VERSION := $$(word 3,$$(_ALL_FIELDS))

  REPO_NAME_ABI_VERSIONED := $$(REPO_NAME)$$(ABI_VERSION)
  $$(if $$(MAKE_DEBUG), $$(info MAKE_DEBUG $$(_when): REPO_NAME is $$(REPO_NAME)))
  $$(if $$(MAKE_DEBUG), $$(info MAKE_DEBUG $$(_when): SO_VERSION is $$(SO_VERSION)))
  $$(if $$(MAKE_DEBUG), $$(info MAKE_DEBUG $$(_when): ABI_VERSION is $$(ABI_VERSION)))

endef





# $(eval) this to run a recursive make. Can be used to change
# directories or to enforce Make flags
define _define_recursive_make

.DEFAULT_GOAL := all
GOALSHERE     := $$(or $$(MAKECMDGOALS),$$(.DEFAULT_GOAL))

# This rule makes whatever I was asked to make. It'll always run since it's phony also
$$(sort $$(MAKECMDGOALS) all): _recursive_rebuild_everything_target
	@true

# I redo this make from the ROOT, re-pathing everything. I use an extra PHONY
# target in order to build ALL my desired targets with a single sub-make
# invocation
#
# Note that if we're inside emacs, I print the directory changes. This is done
# so that the compile-mode error navigation works
_recursive_rebuild_everything_target:
	@$$(MAKE) -rR $(if $(INSIDE_EMACS),,--no-print-directory) -C $$(ROOT) $$(call relpath,$$(GOALSHERE))

.PHONY: $$(MAKECMDGOALS) all _recursive_rebuild_everything_target

endef
