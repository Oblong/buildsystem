# -*- Makefile -*-

# various useful definitions for the build system.
# THIS FILE IS INCLUDED ONCE, BY THE TOP-LEVEL

# variables I use in my recipes and rules. These are reset between includes, and are
# stored to be accessible to my recipes on a per-target basis. This is needed since
# recipes evaluate their variables deferred
ACTIVE_VARS := ALLCFLAGS CFLAGS CXXFLAGS LDFLAGS LDLIBS DIST_BINS			\
DIST_HEADERS DIST_MANS DIST_DOCS DIST_ETC_OBLONG DIST_UPSTART LIB_OBJECTS BIN_TARGET	\
BIN_TARGET_NOINST EXTRACLEAN TARGET_NAME LIB_TARGET_SO_BARE				\
LIB_TARGET_SO LIB_TARGET_A IS_UNIT_TEST dir DESTDIR_MAIN DESTDIR_DEV			\
DIST_ALL API_VERSION PACKAGENAME




# a function to reset the active variables (before a new include) and to poison the
# global active variables. No global variables should be used, and poisoning makes it
# obvious that something wrong is happening
reset-active-vars  = $(foreach v,$(ACTIVE_VARS),$(eval $v := ))
poison-active-vars = $(foreach v,$(ACTIVE_VARS),$(eval $v := $(v)_poison))

# all targets that have recipes defined, which thus need variables accessible to them
# through deferred evaluation. This double-loop generates a function that can be
# evaluated to generate lines such as
# $(LIB_TARGET_SO):  LDFLAGS     := $(LDFLAGS)
#
# This is done for all var/target combinations. This is a bit overkill, since all
# recipes don't need all the variables, but it doesn't hurt
TARGETS_NEED_PERSISTENT_ACTIVE_VARS := $$(dir)/%.o $$(LIB_TARGET_SO)	\
$$(BIN_TARGET_ALL) $$(dir)/check $$(dir)/install


persist-active-vars = $(foreach v,$(ACTIVE_VARS),\
	$(foreach t,$(TARGETS_NEED_PERSISTENT_ACTIVE_VARS),\
		$(eval $t: $v := $$($v))))


# variables that may be specified in the user Makefile that use relative paths.
# Makefile repaths them to $(dir) using the following function
USER_RELATIVE_VARS = DIST_BINS DIST_HEADERS DIST_MANS DIST_DOCS DIST_ETC_OBLONG DIST_UPSTART	\
LIB_OBJECTS BIN_TARGET BIN_TARGET_NOINST EXTRACLEAN
relocate-vars = $(foreach v,$(USER_RELATIVE_VARS),$(eval $v := $(addprefix $(dir)/,$($(v)))))



# 
# basic functional stuff. These are a perl-style grep and map. You call these like
#
# $(call grep,cond,list)
# where cond is another function
grep = $(foreach x,$(2),$(if $(call $(1),$(x)),$(x)))
map  = $(foreach x,$(2),$(call $(1),$(x)))


# a non-destructive wildcard function. Takes a list; any element that matches
# nothing is left alone as is. This also removes duplicates through the $(sort)
# function. Thus it also sorts the list.
soft-wildcard = $(sort $(foreach d,$(1),$(or $(wildcard $(d)),$(d))))



# The 'relpath' function takes a list of paths (local or absolute) and
# returns a cleaned-up path relative to ROOT. For instance, something
# like libRetro/../libAttic gets converted to libAttic. The root gets
# converted to '.'. The empty string is returned unchanged. If an
# out-of-tree absolute path is given, an error is generated
#
# These helpers take a list of paths (relative or absolute) and return
# only those that are (or not) that are in our repo
filter-intree-predicate     = $(filter     $(ROOT)%,$(abspath $(1)))
filter-out-intree-predicate = $(filter-out $(ROOT)%,$(abspath $(1)))
filter-intree     = $(call grep,filter-intree-predicate,$(1))
filter-out-intree = $(call grep,filter-out-intree-predicate,$(1))
#
# this makes paths such as '/libRetro' or ''. 
relpath-withinitial-slash = $(if $(call filter-intree,$(1)),$(patsubst $(ROOT)%,%,$(abspath $(1))), \
	$(error out-of-tree path given: $(1)))
# this converts it to 'libRetro' or '.'
relpath-single = $(if $(relpath-withinitial-slash),$(relpath-withinitial-slash:/%=%),.)
#
# find the relpath of each element
relpath = $(and $(1),$(call map,relpath-single,$(1)))




# base package names from TARGET_NAMEs
PACKAGENAME_BASE_LIB = liboblong-$(shell echo $(TARGET_NAME) | sed 's/^lib//' | tr A-Z a-z)
PACKAGENAME_BASE_BIN = oblong-$(shell echo $(TARGET_NAME) | tr A-Z a-z | tr _ -)
