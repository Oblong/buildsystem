# -*- Makefile -*-

# THIS FILE IS INCLUDED BY EACH PROJECT Makefile

# we only bother to do anything if we were asked to do a make from the
# ROOT directory. In not, Makefile.header has already defined a
# from-root sub-make that will do all the work, so we do nothing here
ifeq ($(_make_will_recurse),)
#{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ not recursive build (full file)

$(if $(MAKE_DEBUG), $(info MAKE_DEBUG $(_when): At top of the $(dir) Makefile))


# if variable overrides aren't allowed, all the active variables can ONLY have
# been appended-to. No other modifications are allowed. The values of those
# variables before the project Makefile are stored in $(_ORIG_varname)
ifeq ($(ALLOW_OVERRIDE),)
  define _check_modified_var
    $(if $(_ORIG_$v),
      $(if $(findstring $(wordlist 1,$(words $(_ORIG_$v)), $($v)),
                        $(_ORIG_$v)),,
        $(error Variable overrides not allowed, but $(dir)/Makefile tweaked $v.
                Set ALLOW_OVERRIDES if you really want to do this)))
  endef

  $(foreach v,$(ACTIVE_VARS), $(eval $(_check_modified_var)))
endif



# if we don't already have a target name, use the directory. So code in the
# libRetro directory would produce libRetro.so and libRetro.a. I can't use ?=
# here because it checks for definedness, not truth
TARGET_NAME  := $(or $(TARGET_NAME),$(notdir $(dir)))
IS_UNIT_TEST := $(filter %/tests,$(dir))

# basic error checking
ifeq ($(IS_UNIT_TEST),)

  ifneq ($(TARGET_NAME:lib%=lib),lib)
    ifneq ($(LIB_OBJECTS),)
      $(error Target "$(TARGET_NAME)" from dir '$(dir)' has LIB_OBJECTS, so it MUST start with "lib" ($(_when)))
    endif
    ifneq ($(DIST_HEADERS),)
      $(error Target "$(TARGET_NAME)" from dir '$(dir)' has DIST_HEADERS, so it MUST start with "lib"($(_when)))
    endif
  endif
  ifeq ($(TARGET_NAME:lib%=lib),lib)
    ifeq ($(LIB_OBJECTS),)
      $(error Target "$(TARGET_NAME)" from dir '$(dir)' starts with lib..., but has no LIB_OBJECTS! ($(_when)))
    endif
  endif
else # ifeq ($(IS_UNIT_TEST),)
  ifneq ($(LIB_OBJECTS),)
    $(error Unit tests '$(dir)' have LIB_OBJECTS. This is not allowed)
  endif
endif



#################### Shared object versioning #########################

# none of this applies for unit tests
ifeq ($(IS_UNIT_TEST),)
  # the first time I see this, I read off all the version information.

  # The debian/changelog has the full version number that I use to version my
  # .so files. So if I'm at version 3.2.5, my libraries will be libA.so.3.2.5
  #
  # I parse the version from debian/changelog. I look at the first line of that
  # file and get everything between '(' and the first '-'. These lines look like
  #
  # oblong-perception (3.11-dima-2) lucid; urgency=low
  #
  # debian has a dpkg-parsechangelog tool to do this for me, but it's
  # significantly slower than the gawk version below, so I don't use it
  LPAREN := (
  RPAREN := )
  SO_VERSION :=													\
    $(or $(SO_VERSION),												\
         $(strip												\
           $(shell												\
             gawk '{ sub(".*\\$(LPAREN)",""); sub("[-$(RPAREN)~].*",""); print; exit}' debian/changelog)),	\
         $(error Could not parse version from debian/changelog))

  # At this time we are using the first two digits to indicate the ABI version,
  # so in the above example, this is '3.2'. This implies a symlink libA.so.3.2
  # -> libA.so.3.2.5. All the library packages must have the ABI version in
  # their name, so the above implies that I have packages named liboblong-a3.2,
  # liboblong-a3.2-dev and liboblong-a3.2-dbg. I ENFORCE those package names. If
  # I see a package that isn't named in this way, I complain loudly.
  #
  # I do not assume the ABI version is two digits. Rather, I look at the
  # 'Source' version in the debian/control. This should be '3.2', or at least
  # some leading subset of '3.2.5'.
  REPO_NAME_ABI_VERSIONED := $(or $(REPO_NAME_ABI_VERSIONED),			\
         $(strip								\
           $(shell								\
             gawk '/Source:/ { print $$2; exit }' debian/control)),		\
           $(error Could not parse Source: repo version from debian/control))

  ABI_VERSION :=									\
    $(or $(ABI_VERSION),								\
         $(strip									\
           $(shell									\
             echo $(REPO_NAME_ABI_VERSIONED) | grep -o '[0-9.]*$$')),			\
           $(error Could not grab repo version from '$(REPO_NAME_ABI_VERSIONED)'.	\
                   Trailing version REQUIRED. Example: 'g-speak3.2'.			\
                   This comes from the 'Source:' field in debian/control))

  $(if $(filter $(ABI_VERSION).%,$(SO_VERSION)),,				\
       $(error Full version from debian/changelog ($(SO_VERSION)) MUST begin	\
               with the Source version from debian/control ($(ABI_VERSION).)))

endif # ifeq ($(IS_UNIT_TEST),)




#################### variable setup ###################################

# the user's makefile gives all the targets in reference to $(dir), so I locate
# them absolutely in the tree
$(eval $(relocate-vars))


SO := $(if $(COND_DARWIN),dylib,so)

# if we have libraries, define their names
ifneq ($(LIB_OBJECTS),)
LIB_TARGET_SO_BARE := $(dir)/$(TARGET_NAME).$(SO)
LIB_TARGET_SO	   := $(LIB_TARGET_SO_BARE).$(SO_VERSION)
LIB_TARGET_A       := $(dir)/$(TARGET_NAME).a
endif


# I separate LDLIBS into those that are a part of this repo and those
# that aren't
LDLIBS_SYSTEM  = $(_create_LDLIBS_SYSTEM)
LDLIBS_PROJECT = $(_create_LDLIBS_PROJECT:%.so=%.$(SO))



# if we don't care how we link the code, use plain cc
CC_LINKER ?= $(CC)

# all objects built for inclusion in shared libraries get -fPIC. This is
# sub-optimal, since it adds the -fPIC overhead even if linking these
# statically, but this will have to do for now
$(LIB_OBJECTS): CCXXFLAGS += -fPIC

# define the compile rules. I need to redefine the rules here because my
# C..FLAGS variables are simple (immediately evaluated), but the user
# could have specified per-target flags that ALWAYS evaluate deferred-ly
cc_build_rule = $(CXX) $(call _CCXXFLAGS_POSTPROCESS,$(CXXFLAGS) $(CCXXFLAGS)) -c -o $@ $<
c_build_rule  = $(CC)  $(call _CCXXFLAGS_POSTPROCESS,$(CFLAGS) $(CCXXFLAGS)) -c -o $@ $<
%.o:%.C
	$(cc_build_rule)
%.o:%.cc
	$(cc_build_rule)
%.o:%.cpp
	$(cc_build_rule)
%.o:%.c
	$(c_build_rule)
%.o: %.S
	$(CC) $(ASFLAGS) $(CPPFLAGS) -c -o $@ $<



BIN_TARGET_ALL := $(BIN_TARGET) $(BIN_TARGET_NOINST)


# install all the binaries that need installing
DIST_BINS += $(BIN_TARGET)


# complain NOW if I'm trying to link with a non-existent -L directory or
# trying to compile with a non-existent -I directory. To pick up
# target-specific settings I always do this when actually doing the
# compile/link later (via _CCXXFLAGS_POSTPROCESS and
# _LDFLAGS_POSTPROCESS). Doing this now as well catches and reports the
# non-target-specific cases earlier
$(call _ensure_custom_dirs_exist,$(CFLAGS) $(CXXFLAGS) $(CCXXFLAGS))


############## rules to build my stuff ################################
#
# I set up all the variables, now use them to define the recipes

# first stuff to convert the PODs to HTML, manpages, and to set their
# distribution
$(dir)/%.1: $(dir)/%.pod
	podchecker $<
	pod2man --center "Oblong Industries" --release "$(TARGET_NAME) $(SO_VERSION)" $< $@

$(dir)/%-man.html: $(dir)/%.pod
	pod2html $< > $@

DIST_MANS +=$(strip $(patsubst %.pod,%.1,       $(wildcard $(dir)/*.pod)))
DIST_DOCS +=$(strip $(patsubst %.pod,%-man.html,$(wildcard $(dir)/*.pod)))

$(if $(MAKE_DEBUG), $(info MAKE_DEBUG $(_when): Defining rules for libs. o: $(LIB_TARGET_SO); a: $(LIB_TARGET_A)))

$(LIB_TARGET_A): $(LIB_OBJECTS) | $(LDLIBS_PROJECT:%.$(SO)=%.a)
	ar rcvu $@ $^

# Here instead of specifying $^, I do just the %.o parts and then the
# others. This is required to make the linker happy to see the dependent
# objects first and the dependency objects last
ifneq ($(COND_DARWIN),)
  $(LIB_TARGET_SO): LDFLAGS += -dynamiclib -flat_namespace -fPIC
else
  $(LIB_TARGET_SO): LDFLAGS += -shared -fPIC -Wl,-soname,$(notdir $(LIB_TARGET_SO_BARE)).$(ABI_VERSION)
endif

$(LIB_TARGET_SO_BARE) $(LIB_TARGET_SO_BARE).$(ABI_VERSION): | $(LIB_TARGET_SO)
$(LIB_TARGET_SO): $(LDLIBS_PROJECT) $(LIB_OBJECTS)
	$(CC_LINKER) $(_LDFLAGS_POSTPROCESS) $(filter %.o, $^) $(filter-out %.o, $^) $(LDLIBS_SYSTEM) -o $@
	ln -fs $(notdir $@) $(LIB_TARGET_SO_BARE)
	ln -fs $(notdir $@) $(LIB_TARGET_SO_BARE).$(ABI_VERSION)

# I'm using $$ here to delay the variable expansion until later, so that the
# rules are generated keeping the variable references intact. For instance, the
# project may have defined a per-target LDLIBS:
#
# executable: LDLIBS += -lfoo
#
# LIB_TARGET_A and LIB_TARGET_SO can't vary per target, so I expand them now, hence the single $
#
# This means that I WANT LDLIBS to be deferred
#
# Here instead of specifying $^, I do just the %.o parts and then the
# others. This is required to make the linker happy to see the dependent
# objects first and the dependency objects last.
#
# I have rules for building both static and a dynamic binaries. The
# dynamic libraries are ONLY built when I'm installing to make packages.
# Thus these binaries are PHONY (always rebuilt to build on top of the
# static ones). They are also INTERMEDIATE so that make deletes them
# when done installing. This ensures that the "normal" static versions
# will be built after and install
#
# Lastly, static links have no benefit of the DT_NEEDED tags in the
# shared objects. Thus they more of the libraries given on the
# commandline. Here I save the LDLIBS_SYSTEM for each project, and use
# LDLIBS_PROJECT to construct all the LDLIBS_SYSTEM that come from a
# project's children. I can then link with those libraries. I make two
# variables $(dir)_LDLIBS_SYSTEM for the current LDLIBS_SYSTEM
# and $(dir)_CHILDREN_LDLIBS_SYSTEM for all of the children's
# LDLIBS_SYSTEM.
#
# Here I can have linking duplicates, but ld is smart enough to throw those out
$(dir)_LDLIBS_SYSTEM  := $(LDLIBS_SYSTEM)
$(dir)_LDLIBS_PROJECT := $(LDLIBS_PROJECT:%.$(SO)=%.a)

$(foreach lib,$(patsubst %/,%,$(dir $(LDLIBS_PROJECT))),							\
	$(eval													\
	  $(dir)_CHILDREN_LDLIBS_SYSTEM  += $$($(lib)_LDLIBS_SYSTEM)  $$($(lib)_CHILDREN_LDLIBS_SYSTEM))	\
	$(eval													\
	  $(dir)_CHILDREN_LDLIBS_PROJECT += $$($(lib)_LDLIBS_PROJECT) $$($(lib)_CHILDREN_LDLIBS_PROJECT)))

define BIN_TARGET_template_static
$(1): $(1).o $(LIB_TARGET_A) $$(LDLIBS_PROJECT:%.$(SO)=%.a)
	$$(CC_LINKER) $$(_LDFLAGS_POSTPROCESS) $$(filter %.o, $$^) $$(filter-out %.o, $$^) \
		$$($$(dir)_CHILDREN_LDLIBS_PROJECT) \
		$$($$(dir)_CHILDREN_LDLIBS_SYSTEM) \
		$$(LDLIBS_SYSTEM) -o $$@
endef

define BIN_TARGET_template_dynamic
$(1): $(1).o $(LIB_TARGET_SO) $$(LDLIBS_PROJECT)
	$$(CC_LINKER) $$(_LDFLAGS_POSTPROCESS) $$(call _rpath-link_dirs_from_libs, $$($$(dir)_CHILDREN_LDLIBS_PROJECT)) \
		$$(filter %.o, $$^) $$(filter-out %.o, $$^)									 \
		$$(LDLIBS_SYSTEM) -o $$@
.PHONY:        $(1)
.INTERMEDIATE: $(1)
endef

# I pick static linking if I'm not installing; if I'm installing use dynamic linking
BIN_TARGET_template = $(if $(filter $(MAKECMDGOALS),install),$(BIN_TARGET_template_dynamic),$(BIN_TARGET_template_static))

# generate the recipe for every target
$(foreach target,$(BIN_TARGET_ALL),$(eval $(call BIN_TARGET_template,$(target))))


#################### clean and all and install rules ##################

# can't install unit tests
ifeq ($(IS_UNIT_TEST),)
include buildsystem/Makefile.install
endif

clean_files := $(addprefix $(dir)/, *.a *.o *.$(SO) *.$(SO).*)
clean_files += pod2htmi.tmp pod2htmd.tmp $(addprefix $(dir)/, *.1 *-man.html)

clean_files += $(BIN_TARGET_ALL) $(EXTRACLEAN) $(LIB_OBJECTS) $(addsuffix .o,$(BIN_TARGET_ALL))

# This is done with an eval to immediately evaluate the files-to-clean list
define CLEAN_template
$(dir)/clean:
	rm -rf $(clean_files) $(patsubst %.o,%.d,$(filter %.o,$(clean_files)))
endef
$(eval $(CLEAN_template))


$(dir)/all: $(LIB_TARGET_A) $(BIN_TARGET_ALL)

clean: $(dir)/clean

# don't build unit tests unless asked
ifeq ($(IS_UNIT_TEST),)
all:   $(dir)/all
endif # ifeq ($(IS_UNIT_TEST),)

.PHONY: clean all $(dir)/clean $(dir)/all



#################### all other convenience rules ######################


# "making" a directory is equivalent to making all there
$(dir):  $(dir)/all
$(dir)/: $(dir)/all

# 'subdirs' makes this project all the projects in all the subdirectories
$(dir)/subdirs: $(filter $(dir)%,$(DIRS))
$(dir)/subdirs/clean: $(addsuffix /clean,$(filter $(dir)%,$(DIRS)))

.PHONY: $(dir) $(dir)/ $(dir)/subdirs $(dir)/subdirs/clean


$(eval $(_read_subsets))


#################### unit tests #######################################

check: $(dir)/check
.PHONY: $(dir)/check check






# the header dependencies
-include $(dir)/*.d


# The recipes used to build targets are evaluated deferred (when needed), so by
# default, the current values of CFLAGS, etc will NOT be used when the recipe is
# evaluated. Here I save these variables on a per-target basis. This makes
# current variables "persist"
$(eval $(persist-active-vars))

# I have now used all my build flags, so nothing should be using them. If some
# build rule STILL uses these (through deferred evaluation) then it's a bug in
# the Makefiles that should be fixed. I poison the variables to make this clear
$(eval $(poison-active-vars))


#}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} not recursive build
endif # ifeq ($(_make_will_recurse),)
