# -*- Makefile -*-

fulldir := $(realpath $(dir))

# include the system-dependent variables and anything oblong-specific
include Makefile.sys


# if we don't already have a target name, use the directory. So code in
# the libRetro directory would produce libRetro.so and libRetro.a
TARGET_NAME ?= $(notdir $(realpath $(dir)))



#################### Shared object versioning #########################

API_VERSION ?= 0

# I parse the version from debian/changelog
VERSION := $(shell dpkg-parsechangelog -ldebian/changelog | awk '/^Version/{ gsub("-.*","",$$2); print $$2}')

ifeq ($(strip $(VERSION)),)
$(error "Couldn't parse version from debian/changelog")
endif

SO_VERSION := $(API_VERSION).$(VERSION)

#######################################################################





DIST_BINS		:= $(addprefix $(dir)/,$(DIST_BINS))
DIST_MANS		:= $(addprefix $(dir)/,$(DIST_MANS))
DIST_DOCS		:= $(addprefix $(dir)/,$(DIST_DOCS))
DIST_ETC_OBLONG		:= $(addprefix $(dir)/,$(DIST_ETC_OBLONG))
DIST_UPSTART		:= $(addprefix $(dir)/,$(DIST_UPSTART))
LIB_OBJECTS		:= $(addprefix $(dir)/,$(LIB_OBJECTS))
BIN_TARGET		:= $(addprefix $(dir)/,$(BIN_TARGET))
BIN_TARGET_NOINST	:= $(addprefix $(dir)/,$(BIN_TARGET_NOINST))
EXTRACLEAN              := $(addprefix $(dir)/,$(EXTRACLEAN))




# if we have libraries, define their names and targets
ifneq ($(LIB_OBJECTS),)

LIB_TARGET_SO_BARE := $(dir)/$(TARGET_NAME).so
LIB_TARGET_SO	   := $(LIB_TARGET_SO_BARE).$(SO_VERSION)
LIB_TARGET_A       := $(dir)/$(TARGET_NAME).a

$(LIB_TARGET_SO_BARE): $(LIB_TARGET_SO)
	ln -fs $(notdir $<) $@
endif




# used to make gcc output header dependency information. All source
# files generated .d dependency definitions that are included at the
# bottom of this file
ALLCFLAGS += -MMD

# if we don't care how we link the code, use plain cc
CC_LINKER ?= $(CC)

CFLAGS   += $(ALLCFLAGS)
CXXFLAGS += $(ALLCFLAGS)

BIN_TARGET_ALL := $(BIN_TARGET) $(BIN_TARGET_NOINST)

all: $(LIB_TARGET_A) $(BIN_TARGET_ALL)

# needed for the dynamically-linked object
$(LIB_OBJECTS): CXXFLAGS += -fPIC
$(LIB_OBJECTS): CFLAGS   += -fPIC

$(LIB_TARGET_A): $(LIB_OBJECTS)
	ar rcvu $@ $^

$(LIB_TARGET_SO): LDFLAGS += -shared -fPIC -Wl,-soname,$(notdir $(LIB_TARGET_SO_BARE)).$(API_VERSION)
$(LIB_TARGET_SO): $(LDLIBS_PROJECT) $(LIB_OBJECTS)
	$(CC_LINKER) $(LDFLAGS) $(LDLIBS) $^ -o $@

# I'm using $$ here to delay the variable expansion until later, so that
# the rules are generated keeping the variable references intact.
define BIN_TARGET_template
$(1):         $(1).o $$(LIB_TARGET_A) $$(LDLIBS_PROJECT:%.so=%.a)
	$$(CC_LINKER) $$(LDFLAGS) $$^ $$(LDLIBS) -o $$@
$(1).dynamic: $(1).o $$(LIB_TARGET_SO) $$(LDLIBS_PROJECT)
	$$(CC_LINKER) $$(LDFLAGS) $$^ $$(LDLIBS) -o $$@
endef
$(foreach target,$(BIN_TARGET_ALL),$(eval $(call BIN_TARGET_template,$(target))))



include Makefile.install

$(fulldir)/clean_FILES := $(addprefix $(dir)/, *.a *.o *.so *.so.* *.d)
$(fulldir)/clean_FILES += $(BIN_TARGET_ALL) $(addsuffix .dynamic,$(BIN_TARGET_ALL)) $(EXTRACLEAN)

$(fulldir)/clean:
	rm -rf $($@_FILES)

.PHONY: all $(fulldir)/clean check

-include $(dir)/*.d

