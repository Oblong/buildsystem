# -*- Makefile -*-

# we only bother to do anything if we were asked to do a make from the
# ROOT directory. In not, Makefile.header has already defined a
# from-root sub-make that will do all the work, so we do nothing here
ifeq ($(nonroot_make),)

$(if $(MAKE_DEBUG), $(info At top of the $(dir) Makefile))

# include the system-dependent variables and anything oblong-specific
include Makefile.sys


# if we don't already have a target name, use the directory. So code in the
# libRetro directory would produce libRetro.so and libRetro.a. I can't use ?=
# here because it checks for definedness, not truth
TARGET_NAME := $(or $(TARGET_NAME),$(notdir $(dir)))


# basic error checking
ifneq ($(LIB_OBJECTS),)
ifneq ($(TARGET_NAME:lib%=lib),lib)
$(error Target $(TARGET_NAME) has LIB_OBJECTS, so it MUST start with "lib")
endif
endif
ifeq ($(TARGET_NAME:lib%=lib),lib)
ifeq ($(LIB_OBJECTS),)
$(error Target $(TARGET_NAME) starts with lib..., but has no LIB_OBJECTS!)
endif
endif


#################### Shared object versioning #########################

# I parse the version from debian/changelog. I look at the first line of that
# file and get everything betwee '(' and the first '-'. These lines look like
#
# oblong-perception (3.11-dima-2) lucid; urgency=low
#
# debian has a dpkg-parsechangelog tool to do this for me, but it's
# significantly slower than the awk version below, so I don't use it
LPAREN := (
VERSION := $(or $(VERSION),$(strip $(shell awk '{ sub(".*\\$(LPAREN)",""); sub("-.*",""); print; exit}' debian/changelog)))
$(if $(VERSION),,$(error "Couldn't parse version from debian/changelog"))


# If I'm building a library, I grab its API version from the name of its debian
# package. So for instance, if debian/control says that I'm building the
# liboblong-retro1 package then the API version for libRetro is 1.
ifneq ($(LIB_OBJECTS),)

# duplicated from Makefile.install. Should break out into a template or something
PACKAGENAME_BASE := liboblong-$(shell echo $(TARGET_NAME) | sed 's/^lib//' | tr A-Z a-z)
API_VERSION := $(shell awk '/Package:[ 	]*$(PACKAGENAME_BASE)[0-9]+[ 	]*$$/ { sub("Package:[ 	]*$(PACKAGENAME_BASE)",""); print; exit;}' debian/control)
$(if $(API_VERSION),,$(error "Couldn't parse API version for $(TARGET_NAME)"))


endif

SO_VERSION := $(API_VERSION).$(VERSION)

#################### variable setup ###################################

# the user's makefile gives all the targets in reference to $(dir), so I locate
# them absolutely in the tree
DIST_BINS		:= $(addprefix $(dir)/,$(DIST_BINS))
DIST_MANS		:= $(addprefix $(dir)/,$(DIST_MANS))
DIST_DOCS		:= $(addprefix $(dir)/,$(DIST_DOCS))
DIST_ETC_OBLONG		:= $(addprefix $(dir)/,$(DIST_ETC_OBLONG))
DIST_UPSTART		:= $(addprefix $(dir)/,$(DIST_UPSTART))
LIB_OBJECTS		:= $(addprefix $(dir)/,$(LIB_OBJECTS))
BIN_TARGET		:= $(addprefix $(dir)/,$(BIN_TARGET))
BIN_TARGET_NOINST	:= $(addprefix $(dir)/,$(BIN_TARGET_NOINST))
EXTRACLEAN              := $(addprefix $(dir)/,$(EXTRACLEAN))


# if we have libraries, define their names
ifneq ($(LIB_OBJECTS),)
LIB_TARGET_SO_BARE := $(dir)/$(TARGET_NAME).so
LIB_TARGET_SO	   := $(LIB_TARGET_SO_BARE).$(SO_VERSION)
LIB_TARGET_A       := $(dir)/$(TARGET_NAME).a
endif

# I separate LDLIBS into those that are a part of this repo and those that
# aren't. If it's ../%.so, I assume that it's in this project. This logic may
# need to be improved in the future. I keep these as deferred references to try
# to capture the per-target LDLIBS settings
LDLIBS_PROJECT = $(call relpath,$(addprefix $(dir)/,$(filter ../%.so,$(LDLIBS))))
LDLIBS_SYSTEM  = $(filter-out ../%.so,$(LDLIBS))

# used to make gcc output header dependency information. All source
# files generated .d dependency definitions that are included at the
# bottom of this file
ALLCFLAGS += -MMD -MP

# if we don't care how we link the code, use plain cc
CC_LINKER ?= $(CC)

CFLAGS   += $(ALLCFLAGS)
CXXFLAGS += $(ALLCFLAGS)

BIN_TARGET_ALL := $(BIN_TARGET) $(BIN_TARGET_NOINST)


# needed for the dynamically-linked object
$(LIB_OBJECTS): CXXFLAGS += -fPIC
$(LIB_OBJECTS): CFLAGS   += -fPIC







############## rules to build libraries and executables ###############
#
# I set up all the variables, now use them to define the recipes

ifneq ($(LIB_OBJECTS),)
$(LIB_TARGET_SO_BARE): $(LIB_TARGET_SO)
	ln -fs $(notdir $<) $@
endif

$(if $(MAKE_DEBUG), $(info Defining rules for libs. o: $(LIB_TARGET_SO); a: $(LIB_TARGET_A)))

$(LIB_TARGET_A): $(LIB_OBJECTS)
	ar rcvu $@ $^

# Here instead of specifying $^, I do just the %.o parts and then the
# others. This is required to make the linker happy to see the dependent
# objects first and the dependency objects last
$(LIB_TARGET_SO): LDFLAGS += -shared -fPIC -Wl,-soname,$(notdir $(LIB_TARGET_SO_BARE)).$(API_VERSION)
$(LIB_TARGET_SO): $(LDLIBS_PROJECT) $(LIB_OBJECTS)
	$(CC_LINKER) $(LDFLAGS) $(filter %.o, $^) $(filter-out %.o, $^) $(LDLIBS_SYSTEM) -o $@

# I'm using $$ here to delay the variable expansion until later, so that the
# rules are generated keeping the variable references intact. For instance, the
# project may have defined a per-target LDLIBS:
#
# executable: LDLIBS += -lfoo
#
# LIB_TARGET_A and LIB_TARGET_SO can't vary per target, so I expand them now, hence the single $
#
# This means that I WANT LDLIBS to be deferred
#
# Here instead of specifying $^, I do just the %.o parts and then the
# others. This is required to make the linker happy to see the dependent
# objects first and the dependency objects last.
#
# I have rules for building both static and a dynamic binaries. The
# dynamic libraries are ONLY built when I'm installing to make packages.
# Thus these binaries are PHONY (always rebuilt to build on top of the
# static ones). They are also INTERMEDIATE so that make deletes them
# when done installing. This ensures that the "normal" static versions
# will be built after and install
#
# Lastly, static links have no benefit of the DT_NEEDED tags in the shared
# objects. Thus they more of the libraries given on the commandline. Here I save
# the LDLIBS_SYSTEM for each project, and use LDLIBS_PROJECT to construct all
# the LDLIBS_SYSTEM that come from a project's children. I can then link with
# those libraries. I make two variables $(TARGET_NAME)_LDLIBS_SYSTEM for the
# current LDLIBS_SYSTEM and $(TARGET_NAME)_CHILDREN_LDLIBS_SYSTEM for all of the
# children's LDLIBS_SYSTEM.
$(TARGET_NAME)_LDLIBS_SYSTEM := $(LDLIBS_SYSTEM)
$(foreach lib,$(basename $(notdir $(LDLIBS_PROJECT))),$(eval \
  $(TARGET_NAME)_CHILDREN_LDLIBS_SYSTEM += $$($(lib)_LDLIBS_SYSTEM) $$($(lib)_CHILDREN_LDLIBS_SYSTEM)))

define BIN_TARGET_template_static
$(1): $(1).o $(LIB_TARGET_A) $$(LDLIBS_PROJECT:%.so=%.a)
	$$(CC_LINKER) $$(LDFLAGS) $$(filter %.o, $$^) $$(filter-out %.o, $$^) \
		$$($$(TARGET_NAME)_CHILDREN_LDLIBS_SYSTEM) $$(LDLIBS_SYSTEM) -o $$@
endef

define BIN_TARGET_template_dynamic
$(1): $(1).o $(LIB_TARGET_SO) $$(LDLIBS_PROJECT)
	$$(CC_LINKER) $$(LDFLAGS) $$(filter %.o, $$^) $$(filter-out %.o, $$^) \
		$$(LDLIBS_SYSTEM) -o $$@
.PHONY:        $(1)
.INTERMEDIATE: $(1)
endef

# I pick static linking if I'm not installing; if I'm installing use dynamic linking
BIN_TARGET_template = $(if $(filter $(MAKECMDGOALS),install),$(BIN_TARGET_template_dynamic),$(BIN_TARGET_template_static))

# generate the recipe for every target
$(foreach target,$(BIN_TARGET_ALL),$(eval $(call BIN_TARGET_template,$(target))))


#################### clean and all rules ##############################

include Makefile.install

clean_files := $(addprefix $(dir)/, *.a *.o *.so *.so.* *.d)
clean_files += $(BIN_TARGET_ALL) $(EXTRACLEAN)

# This is done with an eval to immediately evaluate the files-to-clean list
define CLEAN_template
$(dir)/clean:
	rm -rf $(clean_files)
endef
$(eval $(CLEAN_template))


$(dir)/all: $(LIB_TARGET_A) $(BIN_TARGET_ALL)

clean: $(dir)/clean
all:   $(dir)/all


.PHONY: clean all $(dir)/clean $(dir)/all

#######################################################################



# the header dependencies
-include $(dir)/*.d


# The recipes used to build targets are evaluated deferred (when needed), so by
# default, the current values of CFLAGS, etc will NOT be used when the recipe is
# evaluated. Here I save these variables on a per-target basis. This makes
# current variables "persist"
$(dir)/%.o: CXXFLAGS := -I$(dir) $(CXXFLAGS)
$(dir)/%.o: CFLAGS   := -I$(dir) $(CFLAGS)

$(BIN_TARGET_ALL): LDFLAGS     := $(LDFLAGS)
$(BIN_TARGET_ALL): LDLIBS      := $(LDLIBS)
$(LIB_TARGET_SO):  LDFLAGS     := $(LDFLAGS)
$(LIB_TARGET_SO):  LDLIBS      := $(LDLIBS)
$(BIN_TARGET_ALL): TARGET_NAME := $(TARGET_NAME)


# I have now used all my build flags, so nothing should be using them. If some
# build rule STILL uses these (through deferred evaluation) then it's a bug in
# the Makefiles that should be fixed. I poison the variables to make this clear
LDFLAGS		= LDFLAGS_poison
LDLIBS          = LDLIBS_poison
CFLAGS		= CFLAGS_poison
CXXFLAGS	= CXXFLAGS_poison


endif # ifeq ($(nonroot_make),)
