# -*- Makefile -*-

# THIS DEFINES IMMEDIATE VARIABLES, SO MUST BE INCLUDED IN THE HEADER,
# NOT THE FOOTER
#
# this is how you build QT4 UIs. There's a tool to generate headers from
# UI definitions. There's also a tool to generate metadata from QT
# classes. This must be compiled and linked in. QT4_MOCS is a list of
# all these extra objects needed by QT. Simply add $(QT4_MOCS) to your
# objects list and magic happens. Similar with QT4_UI_HEADERS
#
# QT4_MOCS_BASE and QT4_UI_HEADERS are potentially slow, so I evaluate
# them as an immediate variable to MAKE SURE they are evaluated once
# only. This creates a requirement that this file be included in the
# HEADER, since these variables need to exist by the time the user
# Makefile is evaluated. This creates an extra minor issue in the
# EXTRACLEAN variable. At the start of the footer evaluation, EXTRACLEAN
# is assumed to be directory-local. I thus strip out the $(dir) from
# EXTRACLEAN
QT4_MOCS_BASE  := $(addprefix $(dir)/,$(patsubst %.h,moc_%,$(notdir $(shell grep -ls Q_OBJECT $(dir)/*.h))))
QT4_UI_HEADERS := $(addprefix $(dir)/,$(patsubst %.ui,ui_%.h,$(notdir $(wildcard $(dir)/*.ui))))

$(dir)/ui_%.h: $(dir)/%.ui
	uic-qt4 $< > $@
QT4_EXTRACLEAN := $(QT4_UI_HEADERS)

QT4_MOCS_CPP    = $(addsuffix .cpp,$(QT4_MOCS_BASE))
QT4_MOCS        = $(addsuffix .o,$(QT4_MOCS_BASE))
QT4_EXTRACLEAN += $(addsuffix .*,$(QT4_MOCS_BASE))

# I don't want to blow away the temporary moc_*.cpp files, so I mark them as
# secondary. I only to this if I have any of these files; otherwise, make blows
# away ALL the intermediate files
ifneq (,$(QT4_MOCS_CPP))
  .SECONDARY: $(QT4_MOCS_CPP)
endif

$(dir)/moc_%.cpp: $(dir)/%.h
	moc-qt4 $< > $@

EXTRACLEAN += $(notdir $(QT4_EXTRACLEAN))
